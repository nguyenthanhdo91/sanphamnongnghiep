<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'eccube.logger' shared autowired service.

if ($lazyLoad) {
    return $this->services['eccube.logger'] = $this->createProxy('Logger_fadf7f2', function () {
        return \Logger_fadf7f2::staticProxyConstructor(function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
            $wrappedInstance = $this->load('getEccube_LoggerService.php', false);

            $proxy->setProxyInitializer(null);

            return true;
        });
    });
}

include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'psr'.\DIRECTORY_SEPARATOR.'log'.\DIRECTORY_SEPARATOR.'Psr'.\DIRECTORY_SEPARATOR.'Log'.\DIRECTORY_SEPARATOR.'AbstractLogger.php';
include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Eccube'.\DIRECTORY_SEPARATOR.'Log'.\DIRECTORY_SEPARATOR.'Logger.php';

return new \Eccube\Log\Logger(($this->privates['Eccube\\Request\\Context'] ?? $this->getContextService()), ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()), ($this->services['monolog.logger.front'] ?? $this->load('getMonolog_Logger_FrontService.php')), ($this->services['monolog.logger.admin'] ?? $this->load('getMonolog_Logger_AdminService.php')));
